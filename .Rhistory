new_store <-read.csv("A:/KDD_Hamsa/Project/Project_data/newstore.csv")
dim(new_store)
new_train <-read.csv("A:/KDD_Hamsa/Project/Project_data/newtrain.csv")
train <-read.csv("A:/KDD_Hamsa/Project/Project_data/train.csv")
store <-read.csv("A:/KDD_Hamsa/Project/Project_data/store.csv")
new_train <-read.csv("A:/KDD_Hamsa/Project/Project_data/newtrain.csv")
new_store <-read.csv("A:/KDD_Hamsa/Project/Project_data/newstore.csv")
openDays <- aggregate(train$Store,list(train$Store),length)
head(openDays)
openDays <- aggregate(new_train$Store,list(new_train$Store),length)
head(openDays)
tapply(new_train$Sales,new_train$Year,mean)
new_train$Date <- as.Date(new_train$Date, "%Y-%m-%d")
new_train <- mutate(new_train,Day = as.integer(format(Date, "%d")))
new_train <- mutate(new_train,Month = as.integer(format(Date, "%m")))
new_train <- mutate(new_train,Year = as.integer(format(Date, "%Y")))
head(new_train)
library(Rcpp)
library(dplyr)
library(lubridate)
library(anytime)
new_train$Date <- as.Date(new_train$Date, "%Y-%m-%d")
#converts the date as YYYY-M-D
new_train <- mutate(new_train,Day = as.integer(format(Date, "%d")))
new_train <- mutate(new_train,Month = as.integer(format(Date, "%m")))
new_train <- mutate(new_train,Year = as.integer(format(Date, "%Y")))
head(new_train)
tapply(new_train$Sales,new_train$Year,mean)
length(train$Sales[!train$Open]) / nrow(t)
length(new_train$Sales[!new_train$Open]) / nrow(t)
tapply(new_train$Sales,new_train$Date,mean)
tapply(new_train$Sales,new_train$Month,mean)
cor(train$Customers,train$Sales)
corl<- cor(new_train)
corl
str(new_train)
cor_t<- cor(as.numeric(new_train))
tapply(new_train$Sales,new_train$Day,mean)
a<-tapply(new_train$Sales,new_train$Day,mean)
plot(a)
b<-tapply(new_train$Sales,new_train$Month,mean)
plot(b)
c<-tapply(new_train$Sales,new_train$Year,mean)
plot(c)
summary(train[train$Sales > 20000,])
ggplot(Joined_DS[Joined_DS$Sales != 0,], aes(x = factor(DayOfWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(colour = "orange", outlier.colour = NA, fill = NA) +
labs(title = "Sales by Day and Year") +
facet_wrap(~ Year)
library(ggplot2)
library(ggplot2)
ggplot(Joined_DS[Joined_DS$Sales != 0,], aes(x = factor(DayOfWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(colour = "orange", outlier.colour = NA, fill = NA) +
labs(title = "Sales by Day and Year") +
facet_wrap(~ Year)
Joined_DS <- bind_rows(train,test)
length(which(is.na(Joined_DS)))
Joined_DS <- left_join(new_train,new_store, by = "Store")
length(which(is.na(Joined_DS)))
library(ggplot2)
ggplot(Joined_DS[Joined_DS$Sales != 0,], aes(x = factor(DayOfWeek), y = Sales)) +
geom_jitter(alpha = 0.1) +
geom_boxplot(colour = "orange", outlier.colour = NA, fill = NA) +
labs(title = "Sales by Day and Year") +
facet_wrap(~ Year)
a<-tapply(new_train$Sales,new_train$Day,mean)
plot(a)
avg_day<-tapply(new_train$Sales,new_train$Day,mean)
plot(avg_day)
avg_month<-tapply(new_train$Sales,new_train$Month,mean)
plot(avg_month)
avg_year<-tapply(new_train$Sales,new_train$Year,mean)
plot(avg_year)
storelm <- function(storeNumber) {
store <- Joined_DS[Joined_DS$Store == storeNumber,]  # a store is selected
shuffledIndices <- sample(nrow(store))  # the data for the store are shuffled
store$Prediction <- 0
z <- nrow(store)
for (i in 1:10) {    # 10-fold cross-validation
sampleIndex <- floor(1+0.1*(i-1)*z):(0.1*i*z)  # 10 % of all data rows is selected
test_2 <- store[shuffledIndices[sampleIndex],]  # it is used as test set
train_2 <- store[shuffledIndices[-sampleIndex],]  # the rest is used as training set
modell_2 <- lm(Sales ~ Promo + SchoolHoliday + DayOfWeek + as.factor(Year) + as.factor(Month) + as.factor(Day)+as.numeric(CompetitionDistance)+as.numeric(CompetitionOpenSinceMonth)+ as.numeric(CompetitionOpenSinceYear)+ as.numeric(Promo2)+as.numeric(Promo2SinceWeek)+as.numeric(Promo2SinceYear), train_2)  # a linear model is fitted to the training set
store[shuffledIndices[sampleIndex],]$Prediction <- predict(modell_2,test_2) # predictions are generated for the test set based on the model
}
RMSPE(store$Sales,store$Prediction)
}
paste("RMSPE: ", storelm(1))
print(system.time(print(paste("RMSE: ", storelm(1014)))))
print(system.time(print(paste("RMSE: ", storelm(262)))))
library(Metrics)
library(MLmetrics)
library(FactoMineR)
print(system.time(print(paste("RMSE: ", storelm(1014)))))
print(system.time(print(paste("RMSE: ", storelm(262)))))
library(randomForest)
numericmodel <- function(storeNumber,modelType,...)
{
store <- Joined_DS[Joined_DS$Store == storeNumber,]# select the store
store$Promo <- as.numeric(store$Promo)
store$StateHoliday <- as.numeric(store$StateHoliday)
store$SchoolHoliday <- as.numeric(store$SchoolHoliday)
store$DayOfWeek <- as.numeric(store$DayOfWeek)
store$CompetitionDistance <- as.numeric(store$CompetitionDistance)
store$CompetitionOpenSinceMonth <- as.numeric(store$CompetitionOpenSinceMonth)
store$CompetitionOpenSinceYear <- as.numeric(store$CompetitionOpenSinceYear)
store$Promo2 <- as.numeric(store$Promo2)
store$Promo2SinceWeek <- as.numeric(store$Promo2SinceWeek)
store$Promo2SinceYear <- as.numeric(store$Promo2SinceYear)
#store$PromoInterval <- as.numeric(store$PromoInterval)
shuffledIndices <- sample(nrow(store))# Shuffles the data for the store
store$Prediction <- 0
z <- nrow(store)
for (i in 1:10) { # 10-fold cross-validation
sampleIndex <- floor(1+0.1*(i-1)*z):(0.1*i*z) # 10 % of all data rows is selected
test_1 <- store[shuffledIndices[sampleIndex],]# it is used as test set
train_1 <- store[shuffledIndices[-sampleIndex],(2:(ncol(store)-1))]# the rest is used as training set
modell <- modelType(Sales ~ ., train_1, ...)
store[shuffledIndices[sampleIndex],]$Prediction <- predict(modell,test_1)# predictions are generated for the test set based on the model
}
# sqrt(mean((store$Sales-store$Prediction)^2))
RMSPE(store$Sales,store$Prediction)
}
print(system.time(print(numericmodel(1,randomForest,ntree=2000))))
print(system.time(print(numericmodel(262,randomForest,ntree=2000))))
storelm <- function(storeNumber) {
store <- new_train[new_train$Store == storeNumber,]  # a store is selected
shuffledIndices <- sample(nrow(store))  # the data for the store are shuffled
store$Prediction <- 0
z <- nrow(store)
for (i in 1:10) {    # 10-fold cross-validation
sampleIndex <- floor(1+0.1*(i-1)*z):(0.1*i*z)  # 10 % of all data rows is selected
test_2 <- store[shuffledIndices[sampleIndex],]  # it is used as test set
train_2 <- store[shuffledIndices[-sampleIndex],]  # the rest is used as training set
modell_2 <- lm(Sales ~ Promo + SchoolHoliday + DayOfWeek + as.factor(Year) + as.factor(Month) + as.factor(Day), train_2)  # a linear model is fitted to the training set
store[shuffledIndices[sampleIndex],]$Prediction <- predict(modell_2,test_2) # predictions are generated for the test set based on the model
}
RMSPE(store$Sales,store$Prediction)
}
paste("RMSPE: ", storelm(1))
print(system.time(print(paste("RMSE: ", storelm(1014)))))
storelm <- function(storeNumber) {
store <- Joined_DS[Joined_DS$Store == storeNumber,]  # a store is selected
shuffledIndices <- sample(nrow(store))  # the data for the store are shuffled
store$Prediction <- 0
z <- nrow(store)
for (i in 1:10) {    # 10-fold cross-validation
sampleIndex <- floor(1+0.1*(i-1)*z):(0.1*i*z)  # 10 % of all data rows is selected
test_2 <- store[shuffledIndices[sampleIndex],]  # it is used as test set
train_2 <- store[shuffledIndices[-sampleIndex],]  # the rest is used as training set
modell_2 <- lm(Sales ~ Promo + SchoolHoliday + DayOfWeek + as.factor(Year) + as.factor(Month) + as.factor(Day)+as.numeric(CompetitionDistance)+as.numeric(CompetitionOpenSinceMonth)+ as.numeric(CompetitionOpenSinceYear)+ as.numeric(Promo2)+as.numeric(Promo2SinceWeek)+as.numeric(Promo2SinceYear), train_2)  # a linear model is fitted to the training set
store[shuffledIndices[sampleIndex],]$Prediction <- predict(modell_2,test_2) # predictions are generated for the test set based on the model
}
RMSPE(store$Sales,store$Prediction)
}
paste("RMSPE: ", storelm(1))
print(system.time(print(paste("RMSE: ", storelm(1)))))
print(system.time(print(paste("RMSE: ", storelm(262)))))
